<?php
if (!defined('IN_PHPBB')) exit;

if (!defined('SQL_LAYER')) {
    define('SQL_LAYER', 'mysql');

    class sql_db {
        var $db_connect_id;
        var $query_result;
        var $row = array();
        var $rowset = array();
        var $num_queries = 0;
        var $in_transaction = 0;

        var $persistency;
        var $user;
        var $password;
        var $server;
        var $dbname;

        var $sql_code = '';

        function __construct($sqlserver, $sqluser, $sqlpassword, $database, $persistency = true) {
            $this->persistency = $persistency;
            $this->user = $sqluser;
            $this->password = $sqlpassword;
            $this->server = $sqlserver;
            $this->dbname = $database;

            // Create a connection
            if ($this->persistency) {
                $this->db_connect_id = @mysqli_connect('p:' . $this->server, $this->user, $this->password, $this->dbname);
            } else {
                $this->db_connect_id = @mysqli_connect($this->server, $this->user, $this->password, $this->dbname);
            }

            return $this->db_connect_id ? $this->db_connect_id : false;
        }

        function sql_close() {
            return $this->db_connect_id ? @mysqli_close($this->db_connect_id) : false;
        }

        function sql_query($query = '', $transaction = FALSE) {
            unset($this->query_result);
            $this->sql_code = $query;

            if ($query != "") {
                $this->num_queries++;
                if ($transaction == BEGIN_TRANSACTION && !$this->in_transaction) {
                    $result = @mysqli_begin_transaction($this->db_connect_id);
                    if (!$result) {
                        return false;
                    }
                    $this->in_transaction = TRUE;
                }

                $this->query_result = @mysqli_query($this->db_connect_id, $query);
            } else {
                if ($transaction == END_TRANSACTION && $this->in_transaction) {
                    $result = @mysqli_commit($this->db_connect_id);
                }
            }

            if ($this->query_result) {
                unset($this->row[$this->query_result]);
                unset($this->rowset[$this->query_result]);

                if ($transaction == END_TRANSACTION && $this->in_transaction) {
                    $this->in_transaction = FALSE;
                    if (!mysqli_commit($this->db_connect_id)) {
                        @mysqli_rollback($this->db_connect_id);
                        return false;
                    }
                }
                return $this->query_result;
            } else {
                if ($this->in_transaction) {
                    @mysqli_rollback($this->db_connect_id);
                    $this->in_transaction = FALSE;
                }
                return false;
            }
        }

        function sql_numrows($query_id = 0) {
            if (!$query_id) {
                $query_id = $this->query_result;
            }
            return ($query_id) ? @mysqli_num_rows($query_id) : false;
        }

        function sql_affectedrows() {
            return ($this->db_connect_id) ? @mysqli_affected_rows($this->db_connect_id) : false;
        }

        function sql_numfields($query_id = 0) {
            if (!$query_id) {
                $query_id = $this->query_result;
            }
            return ($query_id) ? @mysqli_num_fields($query_id) : false;
        }

        function sql_fieldname($offset, $query_id = 0) {
            if (!$query_id) {
                $query_id = $this->query_result;
            }
            return ($query_id) ? @mysqli_fetch_field_direct($query_id, $offset)->name : false;
        }

        function sql_fieldtype($offset, $query_id = 0) {
            if (!$query_id) {
                $query_id = $this->query_result;
            }
            return ($query_id) ? @mysqli_fetch_field_direct($query_id, $offset)->type : false;
        }

        function sql_fetchrow($query_id = 0) {
            if (!$query_id) {
                $query_id = $this->query_result;
            }
            if ($query_id) {
                $this->row[$query_id] = @mysqli_fetch_assoc($query_id);
                return $this->row[$query_id];
            } else {
                return false;
            }
        }

        function sql_fetchrowset($query_id = 0) {
            if (!$query_id) {
                $query_id = $this->query_result;
            }
            if ($query_id) {
                unset($this->rowset[$query_id]);
                unset($this->row[$query_id]);

                $result = array();
                while ($this->rowset[$query_id] = @mysqli_fetch_assoc($query_id)) {
                    $result[] = $this->rowset[$query_id];
                }
                return $result;
            } else {
                return false;
            }
        }

        function sql_rowseek($rownum, $query_id = 0) {
            if (!$query_id) {
                $query_id = $this->query_result;
            }
            return ($query_id) ? @mysqli_data_seek($query_id, $rownum) : false;
        }

        function sql_nextid() {
            return ($this->db_connect_id) ? @mysqli_insert_id($this->db_connect_id) : false;
        }

        function sql_freeresult($query_id = 0) {
            if (!$query_id) {
                $query_id = $this->query_result;
            }
            if ($query_id) {
                unset($this->row[$query_id]);
                unset($this->rowset[$query_id]);
                @mysqli_free_result($query_id);
                return true;
            } else {
                return false;
            }
        }

        function sql_error() {
            return array(
                'message' => @mysqli_error($this->db_connect_id),
                'code' => @mysqli_errno($this->db_connect_id),
                'sql' => $this->sql_code
            );
        }

        function sql_escape($msg) {
            return mysqli_real_escape_string($this->db_connect_id, $msg);
        }

        function sql_build_array($query, $assoc_ary = false) {
            if (!is_array($assoc_ary)) {
                return false;
            }

            $fields = $values = array();

            if ($query == 'INSERT' || $query == 'INSERT_SELECT') {
                foreach ($assoc_ary as $key => $var) {
                    $fields[] = $key;

                    if (is_array($var) && is_string($var[0])) {
                        $values[] = $var[0];
                    } else {
                        $values[] = $this->_sql_validate_value($var);
                    }
                }

                $query = ($query == 'INSERT') ? ' (' . implode(', ', $fields) . ') VALUES (' . implode(', ', $values) . ')' : ' (' . implode(', ', $fields) . ') SELECT ' . implode(', ', $values) . ' ';
            } else if ($query == 'MULTI_INSERT') {
                trigger_error('The MULTI_INSERT query value is no longer supported. Please use sql_multi_insert() instead.', E_USER_ERROR);
            } else if ($query == 'UPDATE' || $query == 'SELECT') {
                $values = array();
                foreach ($assoc_ary as $key => $var) {
                    $values[] = "$key = " . $this->_sql_validate_value($var);
                }
                $query = implode(($query == 'UPDATE') ? ', ' : ' AND ', $values);
            }

            return $query;
        }

        function _sql_validate_value($var) {
            if (is_null($var)) {
                return 'NULL';
            } else if (is_string($var)) {
                return "'" . $this->sql_escape($var) . "'";
            } else {
                return (is_bool($var)) ? intval($var) : $var;
            }
        }
    }
}
?>
